  #___________________________THYMIO ROBOT AS DELIVERY SERVICE__________________________
#_________________-FOR SUCCESSFUL DELIVERY TO DESTINATION the following is required by the DS (DELIVERY SERVICE)
#__________________REQUIRED INFORMATION FROM BBRS_____[ SENDER_ID, DESTINATION_ID ]_________________________
#____________________DELIVERY SERVICE MUST SEND ___[ACK_SENDER_ID, ACK_DESTINATION_ID]______________________

var find_SENDER_BBRS = 0 # determines if robot starts it program or not
var BBRS_found_Successful = 0 # this variable tells when BBRS is found and all required data has being received and passed
var SENDER_ID = 0 # TO BE RECIEVED FROM BBRS
var DESTINATION_ID = 0 # TO BE RECIEVED FROM BBRS
var MESSAGE = 0
var REQUIRED_DETAILS_RECEIVED = 0

var ACK_SENDER_ID = 0 # TO BE SENT TO BBSR
var ACK_DESTINATION_ID =0# TO BE SENT BBSR
var ACK_MESSAGE = 0

#------------------------------------------- 3 ACKS REQUIRED TO VERIFY THE VALUE PASSED BETWEEN BBRS AND DS
var ACK_SENDER_ID_RCV = 0
var ACK_DESTINATION_ID_RCV = 0
var ACK_MESSAGE_ID_RCV = 0

# THIS VARIABLE WILL HELP ENSURE THE ACKS COMPUTED ABOVE HAVE BEING CORRECTLY SENT
var ACK_SENDER_ID_SENT = 0
var ACK_DESTINATION_ID_SENT = 0
var ACK_MESSAGE_ID_SENT = 0


#________________________________________________________________________SET DEFAULT BEHAVIOUR
call prox.comm.enable(0)
#________________________________________________________________________REMOTE CONTROL
onevent rc5
	if (rc5.command == 53) then # remote control signal to initiate program execution
		call prox.comm.enable(1)
		find_SENDER_BBRS = 1
		call leds.top(32,32,32)
	end	

#_________________________________________________________________________ COMMUNICATION EVENT
onevent prox.comm
		if (find_SENDER_BBRS == 1) then # programm entry to listen for BBRS sender
			# we store incoming prox.comm.rx 
			#check of SENDER_ID ===0 at the moment , it true store the incoming prox.comm.rx value as the new SENDER_ID value
			if (SENDER_ID < 1) then
				callsub GET_SENDER_ID
			end
			
			#after saving the new value for SENDER_ID
			#now we send the ACK FOR THE SENDER_ID
			if (ACK_SENDER_ID_RCV == 1) then # if sender_id recvd
				call leds.top(32,10,0)
				ACK_SENDER_ID  = (SENDER_ID + 100) # compute the ACK for SENDER_ID
				prox.comm.tx = ACK_SENDER_ID # send the ACK for the SENDER_ID
				ACK_SENDER_ID_SENT = 1
			end
			
			#Now we can recieved the DESTINATION_ID
			if (ACK_SENDER_ID_SENT == 1 and DESTINATION_ID == 0) then
				callsub GET_DESTINATION_ID
			end
			
			#after saving the value of the destination_id
			#now compute the ACK_DESTINATION_ID
			if (ACK_DESTINATION_ID_RCV ==1) then
				call leds.top(32,20,0)
				#compute the ack for destination_id
				ACK_DESTINATION_ID = (DESTINATION_ID + 101)
				prox.comm.tx = ACK_DESTINATION_ID
				ACK_DESTINATION_ID_SENT = 1
			end
			
			#after saving the new value for the DESTINATION_ID received
			#we can now recieve the main message
			if (ACK_DESTINATION_ID_SENT == 1 and MESSAGE == 0) then
				callsub GET_MESSAGE 
			end
			
			#after saving the new value for the message 
			#we can now send the ack for the MESSAGE content Received
			if (ACK_MESSAGE_ID_RCV ==1) then
				call leds.top(32,32,0)
				ACK_MESSAGE = (MESSAGE + 1)
				prox.comm.tx = ACK_MESSAGE
				ACK_MESSAGE_ID_SENT  = 1 
			end
		end
		
	#now give a visual confirmation that all condition satisfied
	if (ACK_SENDER_ID_SENT == 1 and ACK_DESTINATION_ID_SENT == 1 and ACK_MESSAGE_ID_SENT == 1 and MESSAGE !=  DESTINATION_ID and ACK_MESSAGE != DESTINATION_ID) then
		call leds.top(0,32,0)
	end
	
sub GET_SENDER_ID # listen for incoming SENDER_ID
		SENDER_ID = prox.comm.rx
		ACK_SENDER_ID_RCV = 1
sub GET_DESTINATION_ID #listen for incoming DESTINATION_ID
	if (prox.comm.rx !=SENDER_ID) then
		DESTINATION_ID = prox.comm.rx
		ACK_DESTINATION_ID_RCV = 1
	end
sub GET_MESSAGE # listen for incoming message	
	if (prox.comm.rx != DESTINATION_ID) then
		MESSAGE = prox.comm.rx 
		ACK_MESSAGE_ID_RCV = 1
	end
	