<!DOCTYPE aesl-source>
<network>


<!--list of global events-->


<!--node Thymio-II Wireless-->
<node name="Thymio-II Wireless" nodeId="{8b421767-d0f0-48b9-84c5-ba451505b350}"><![CDATA[# Stick pulling0 Experiment
#------------------Thymio Beacon-------------------------

var thymioWorker1 = 0 #first nearby thymio
var thymioWorker2 = 0 #second neaby thymio

var countToSelfDestruct = 0
var closeCommunicationOnCollaborationSuccessful = 0
var thymioResetActivated = 0
var terminateCommunication = 0
var worker1 = 0
var worker2 = 0

var restartCommunication = 0
var errorMessage = 404

var timerWait = 0
var timerCounter = 0 

var foundThymio = 0
var countThymioWorkerFound = 0

var i = 0

var nearByThymioWorker[2]

var thymioBeaconID = 101 # thymio beacon id to emitted to nearby thymio-workers

var collaborationSuccessful = 0 #if collaboration successful value = 1 else 0
var timeOut = 0 # time out value 0 is default value, -1 timeOut 

call prox.comm.enable(1) #Infrared communication opened
prox.comm.tx = thymioBeaconID #Broadcast Thymio BeaconID

#led lights display set to off
call leds.bottom.left(32,0,0)
call leds.bottom.right(32,0,0)
call leds.buttons(32,0,0,0)
call leds.top(32,0,0)
call leds.circle(32,0,0,0,0,0,0,0)
call leds.prox.h(32,0,0,0,0,0,0,0)
call leds.prox.v(32,0)
call leds.rc(32)
call leds.sound(32)
call leds.temperature(32,0)

timer.period[0] = 200 
timer.period[1] = 0
call sound.system(-1)


#------------------end here------------------------------------------
onevent timer0
	call sound.system(5)
	timerCounter++
	
call leds.top(32,0,0) 	
call leds.bottom.left(32,0,0)
call leds.bottom.right(32,0,0)
call leds.buttons(32,32,32,32)
call leds.circle(32,32,32,32,32,32,32,32)
call leds.prox.h(32,32,32,32,32,32,32,32)
call leds.prox.v(32,32)
call leds.rc(32)
call leds.sound(32)
call leds.temperature(32,32)	

if (timerCounter > 0) then #timer sleeps
	timer.period[0] = 0 
	timerCounter = 0
	timer.period[1] = 500
	
call leds.top(32,0,0) 	
call leds.bottom.left(32,0,0)
call leds.bottom.right(32,0,0)
call leds.buttons(32,32,32,32)
call leds.circle(32,32,32,32,32,32,32,32)
call leds.prox.h(32,32,32,32,32,32,32,32)
call leds.prox.v(32,32)
call leds.rc(32)
call leds.sound(32)
call leds.temperature(32,32)	
end

#--------------------timer 1
onevent timer1
	timerWait++
if (timerWait > 2) then
		call sound.system(5)
		timer.period[0] = 200 
		timerWait = 0
		
call leds.top(0,0,0) 	
call leds.bottom.left(0,0,0)
call leds.bottom.right(0,0,0)
call leds.buttons(0,0,0,0)
call leds.circle(0,0,0,0,0,0,0,0)
call leds.prox.h(0,0,0,0,0,0,0,0)
call leds.prox.v(0,0)
call leds.rc(0)
call leds.sound(0)
call leds.temperature(0,0)	
end
# intention here is to turn off beacon when colloboration is successful and complete
if (closeCommunicationOnCollaborationSuccessful == 1) then
	timer.period[1] = 99  #init timer for 99 ms
	call leds.top(0,0,32)
end
#--------------------------------Thymio Beacon communication with nearBy thymio-worker------------------------------------------------

#------------count number of Thymio workers found-------------
countThymioWorkerFound = worker1 + worker2



#---------------------------------------<Beacon>-----<Communication>------------------------------------
onevent prox.comm
		#-------------beacon start communication and broadcast signal
		callsub beaconCommunication
#-------------------------reset nearByThymioWorker variable stored in Beacon is error message is recieved from # nearbythymio worker........
# Error Messge 404 signfies that the nearby robot has given up waiting and resumed randonWalkState............
	#check if 404 recieved
	if (nearByThymioWorker[1] == 404) then
	#intention here is to reset the values of the array below
	# reset the values of prox.comm
			nearByThymioWorker[0] = 0
			nearByThymioWorker[1] = 0
			thymioWorker1 = 0
			thymioWorker2 = 0
			worker1 =0
			worker2 =0
			countThymioWorkerFound =0
			call sound.system(1)
	end

#------------check for successful colloboration of two thymioWorker with thymio beacon---------------------	
if(collaborationSuccessful == 1)then
	call sound.system(7)
	prox.comm.tx = 20
	timer.period[1] =0
	timer.period[0] =0
call leds.top(0,32,0) 	
call leds.bottom.left(0,0,0)
call leds.bottom.right(0,0,0)
call leds.buttons(0,0,0,0)
call leds.circle(0,0,0,0,0,0,0,0)
call leds.prox.h(0,0,0,0,0,0,0,0)
call leds.prox.v(0,0)
call leds.rc(0)
call leds.sound(0)
call leds.temperature(0,0)	
end
#---------------------------------------------------------------------------------------------------------------------------------------------

#-------------------------------this subroutine is activated on prox.comm event in which the beacon will be able to recieve and pass message to nearby thymio robot-----
sub beaconCommunication

	#-------------recieve signal from nearby Thymio Worker------------------
foundThymio = prox.comm.rx

	if (collaborationSuccessful == 0) then
	#-------------thymio beacon receives signal from nearby thymio worker
	#-----------only two thymioWorkers can be acknowledged----------
	if (thymioWorker1 == 0 and prox.comm.rx !=errorMessage and nearByThymioWorker[0] == 0) then # assign first signal received to thymioWorker1
		thymioWorker1 = foundThymio
		nearByThymioWorker[0] = thymioWorker1
				worker1++
		#-----------acknowledge the robot sending signal----------------------
		if (worker1 == 1) then
				prox.comm.tx = thymioWorker1
				call sound.system(3)
	end
	end

	if (thymioWorker1 !=0 and thymioWorker2 == 0 and nearByThymioWorker[1] == 0 ) then
			thymioWorker2 = foundThymio
			#---verify thymioWorker2 if the signal recieved is different from thymioWorker1
			if (thymioWorker2 == thymioWorker1) then
				thymioWorker2 = 0
			else
				nearByThymioWorker[1] = thymioWorker2
						worker2++
				#-----------acknowledge the robot sending signal----------------------
					if (worker2 == 1) then
							prox.comm.tx = thymioWorker2
							call sound.system(7)
					end
			end
	end
	
	# collaboration successful ---------
	if (thymioWorker1 !=0 and thymioWorker2 !=0 and thymioWorker1 != thymioWorker2 and nearByThymioWorker[0] != nearByThymioWorker[1] 
	and nearByThymioWorker[0] !=errorMessage and nearByThymioWorker[1] !=errorMessage and nearByThymioWorker[0] !=0 and nearByThymioWorker[1] != 0) then
	collaborationSuccessful = 1 
	closeCommunicationOnCollaborationSuccessful =1 
	end

end

onevent prox
	if (closeCommunicationOnCollaborationSuccessful ==1) then
	countToSelfDestruct++
	if (countToSelfDestruct > 99) then
		call prox.comm.enable(0)
		countToSelfDestruct =0
		closeCommunicationOnCollaborationSuccessful = 0
		call leds.top(0,0,0)
	end
	end
	
	

]]></node>


<!--node Thymio-II Wireless-->
<node name="Thymio-II Wireless" nodeId="{66fded79-b9db-46e2-9000-615f53e00374}"><![CDATA[#Collision Avoidance
#Robot is intended to avoid obstacles and give feedback obstacle in range of sensor readings

#	var thymioBeaconID = 0
var thymioWorker = 01
var timeOut = 404
var timeOutCounter = 0
var countDownTillCollab = 0
var countDownAfterCollab = 0
var initAfterSuccessfulCollab = 0
var enableCommAfterTimeout = 0

var isMovingAfter404Error = 0

var staticSensorThreshold = 3200

var sensorFrontMax = 0 
var sensorBackMax = 0

var reverseProtocal = 0

var detectDeadEnd = 0

var kickStart = 0

var reverseFromLeft = 0
var reverseFromRight = 0

var initiateReverse = 0
var countLeftSteps = 0
var countRightSteps = 0
var countFrontSteps = 0
var sensorSumFront = 0
var sensorSumBack = 0 

var shouldMove = 0 # holds the value moving 1 and not moving 0
var i =0  #variable set default to 1
var sensorFrontArray[5] #array to hold sensor array at the front
var sensorBackArray[2] # array to hold sensor array at the back
var overrideRemote = 0
var direction = 0 # 0: hasn-t just turned; 1: just turned left; 2: just turned right; 3: just moved back

#initial movement disabled
motor.left.target = 0
motor.right.target = 0

 #set led default to off
 call leds.bottom.right(0,0,0)
 call leds.bottom.left(0,0,0)
# call leds.top(32,32,0)

#------------------------------------------------------Remote Control Signal to Robot------------------------------------------------------
  #here we init robot movement forwared with remote control
onevent rc5
 if (rc5.command == 53) then
 	shouldMove = 1
 	call prox.comm.enable(1)
 	call leds.top(31,31,12) #change color code to specified	
 
 #halt robot movement on remote signal 13 or 87
elseif (rc5.command == 87) then
 	call leds.top(31,0,0) # change color to red on remote signal 13
 	shouldMove = 0 #set moving to false
 	motor.left.target = 0
 	motor.right.target = 0
end
 	
#-----------------------------------------------------------------------------Collision Avoidance---------------------------------------------------------	
 #obstacle avoidance
onevent prox	
	# front sensor array
	sensorFrontArray[0] = prox.horizontal[0]
	sensorFrontArray[1] = prox.horizontal[1]
	sensorFrontArray[2] = prox.horizontal[2]
	sensorFrontArray[3] = prox.horizontal[3]
	sensorFrontArray[4] = prox.horizontal[4]
	# back sensor array
	sensorBackArray[0] =  prox.horizontal[5]
	sensorBackArray[1] =  prox.horizontal[6]
	#max of front sensor array
	sensorFrontMax = 0
	#max of back sensor array
	sensorBackMax = 0
	#sum of front sensor array
	sensorSumFront = 0
	#sum of back sensor array
	sensorSumBack = 0
#----------------------------------------------Loop to track sensor readings ----------------------------------	
	# loop to find max front sensors
	for i in 0:4 do
		if (sensorFrontArray[i] > sensorFrontMax) then
			sensorFrontMax = sensorFrontArray[i]
		end
	end
	
	# loop to find max back sensors
	for i in 0:1 do
		if (sensorBackArray[i] > sensorBackMax) then
			sensorBackMax = sensorBackArray[i]
		end
	end
	
	# sum of front sensors
	for i in 0:4 do
		sensorSumFront = sensorSumFront+ sensorFrontArray[i]
	end
	
	# sum of back sensors
	for i in 0:1 do
		sensorSumBack = sensorSumBack+ sensorBackArray[i]
	end
#------------------------------------------Loop declararations Ends here--------------------------------------------	

if (shouldMove == 1) then
	#call prox.comm.enable(1)
	call leds.top(0,31,0)
	if (sensorFrontMax < 900) then # only moves forward when no sensor readings higher than 0
			call leds.top(0,31,0)
			motor.left.target = 2000
			motor.right.target = 2000
			reverseFromRight = 0
			reverseFromLeft = 0
	 	elseif (prox.horizontal[1] > 900 or prox.horizontal[0] > 900) then
	 		#turn left
	 		call leds.top(31,0,0)
	 		motor.left.target = 100
	 		motor.right.target = -200
	 		reverseFromLeft = 1
	 		countLeftSteps++
	 		
		elseif (prox.horizontal[3] > 900 or prox.horizontal[4]>900) then
	 		#turn right
	 		call leds.top(31,0,0)
	 		motor.right.target = 100
			motor.left.target = -200
			#reverseFromRight = 1
			countRightSteps++	
			
		#middle sensor at 2
			elseif (sensorFrontMax == prox.horizontal[2]) then
	 		#turn right
	 		call leds.top(31,31,0)
	 		motor.right.target = -500
			motor.left.target =	 -500
	 		#countFrontSteps++
	 		#motor.left.target = 0
			#motor.left.target = -50
			#robot stuck in front?
			elseif (prox.horizontal[2] == sensorFrontMax and prox.horizontal[2] == sensorSumFront) then
				countFrontSteps++
				
			#check rear sensor
			elseif (sensorSumBack > 7000) then
			motor.right.target = 500
			motor.left.target =	 500			
	end	

#deadEnd?
if (sensorSumFront > 6000 and sensorSumFront < 20000 ) then
	detectDeadEnd++
end

if (detectDeadEnd >1 and sensorSumBack <1000) then
	call leds.top(0,0,32)
	motor.right.target = -900
	motor.left.target =	 0
	detectDeadEnd = 0
end

if (countRightSteps > 2) then
	motor.right.target = 500
	motor.left.target = 500
	countRightSteps = 0
	
elseif (countLeftSteps  > 2) then
	motor.right.target = 500
	motor.left.target = 500
	countLeftSteps = 0
	
elseif (countFrontSteps > 1) then
	motor.right.target = -200
	motor.left.target = -200
	countFrontSteps = 0
	
end


if (sensorFrontMax > 3000) then
	initiateReverse++
end

if(initiateReverse >2) then
	call leds.top(32,0,0)
	motor.right.target = -900
	motor.left.target = -900
	initiateReverse=0
	reverseProtocal++
end

if (reverseProtocal > 8) then
	motor.right.target = 1000
	motor.left.target = 1000
	reverseProtocal=0
end

end
#----------------------------COLLISION AVOIDANCE END HERE----------------------------------

#------------------------------Thymio Worker ---------------------------------------



prox.comm.tx = thymioWorker

#call leds.top(0,0,32)

onevent prox.comm
	#------------listen for messages from thymioBeacon------------------------
	
	#-----------get confirmation from beacon---check if confirmation matches ID--------------
	if (prox.comm.rx == thymioWorker) then
				shouldMove = 0 # halt robot movement.
				motor.left.target = 0
				motor.right.target =0
				call leds.top(32,32,0)
				#call sound.system(7)
				call sound.duration(0,10)
		#at this point thymioWorker receives its ID from the beacon
			#init timer
			countDownTillCollab++ #counter for waiting time
	elseif (prox.comm.rx == 20) then
		call leds.top(0,32,0)
		call prox.comm.enable(0)
		shouldMove = 0
		motor.left.target = 0
		motor.right.target =0
		timer.period[1] =100
		initAfterSuccessfulCollab = 1
	else
	#	call leds.top(0,0,32) #default to blue
	end

#---------------check is waiting time elapsed-----------here we check if no collaboration response recieved from beacon then send 404 error message
if (countDownTillCollab > 200) then	
		call leds.top(32,0,0)
		call prox.comm.enable(1)
		prox.comm.tx = timeOut #send time out message to beacon if no successful collaboration message recieved
		countDownTillCollab = 0
		timeOutCounter =1 #next step set timeOutCounter to 1 to  enable randomWalk
		timer.period[0] = 100 #init timer for 100ms to enable communication
end
#--------------------------disable communication and resume random walk------------------------	

onevent timer1
# set a variable that decides which count down variable is incremented 
if (initAfterSuccessfulCollab == 1) then
	countDownAfterCollab++# intention here is to enable communication if initAfterSuccessfulCollab = 1 and  countDownAfterCollab > 90 
	#which is activated if the collaboration is successful
	if (countDownAfterCollab > 90) then
		shouldMove =1
		timer.period[1] = 0 
		countDownAfterCollab = 0
		call prox.comm.enable(1)
		initAfterSuccessfulCollab = 0
	end
	
end


# intention is to restart communication is the variable isMovingAfter404Error === 1
if (isMovingAfter404Error == 1) then
	#timer is currently running so enable prox.comm.enable(1) is enableCommAfterTimeout > 90 
	#at this point robot already resumed randomwalk due to timeout because no colloboration successfull recieved
	# inorder to walk robot must not communicate with beacon else it continues to recieve signal from beacon and wont walk away
	enableCommAfterTimeout++
	if (enableCommAfterTimeout > 99) then
			call prox.comm.enable(1)
			call sound.system(6)
			enableCommAfterTimeout = 0
			isMovingAfter404Error = 0
	end
		
end



onevent timer0
	if (timeOutCounter == 1) then
			call prox.comm.enable(0) #check if timeOutCounter === 1 and shut off communication so that robot can resume random walk
			shouldMove = 1
			timer.period[0] = 0 
			isMovingAfter404Error =1
			timer.period[1] = 100 
			timeOutCounter = 0
	end
	


]]></node>


<!--node Thymio-II Wireless-->
<node name="Thymio-II Wireless" nodeId="{23dea047-9ef1-452e-827d-1e8c94e10754}"><![CDATA[#Collision Avoidance
#Robot is intended to avoid obstacles and give feedback obstacle in range of sensor readings

#	var thymioBeaconID = 0
var thymioWorker = 02
var timeOut = 404
var timeOutCounter = 0
var countDownTillCollab = 0
var countDownAfterCollab = 0
var initAfterSuccessfulCollab = 0
var enableCommAfterTimeout = 0

var isMovingAfter404Error = 0

var staticSensorThreshold = 3200

var sensorFrontMax = 0 
var sensorBackMax = 0

var reverseProtocal = 0

var detectDeadEnd = 0

var kickStart = 0

var reverseFromLeft = 0
var reverseFromRight = 0

var initiateReverse = 0
var countLeftSteps = 0
var countRightSteps = 0
var countFrontSteps = 0
var sensorSumFront = 0
var sensorSumBack = 0 

var shouldMove = 0 # holds the value moving 1 and not moving 0
var i =0  #variable set default to 1
var sensorFrontArray[5] #array to hold sensor array at the front
var sensorBackArray[2] # array to hold sensor array at the back
var overrideRemote = 0
var direction = 0 # 0: hasn-t just turned; 1: just turned left; 2: just turned right; 3: just moved back

#initial movement disabled
motor.left.target = 0
motor.right.target = 0

 #set led default to off
 call leds.bottom.right(0,0,0)
 call leds.bottom.left(0,0,0)
# call leds.top(32,32,0)

#------------------------------------------------------Remote Control Signal to Robot------------------------------------------------------
  #here we init robot movement forwared with remote control
onevent rc5
 if (rc5.command == 53) then
 	shouldMove = 1
 	call prox.comm.enable(1)
 	call leds.top(31,31,12) #change color code to specified	
 
 #halt robot movement on remote signal 13 or 87
elseif (rc5.command == 87) then
 	call leds.top(31,0,0) # change color to red on remote signal 13
 	shouldMove = 0 #set moving to false
 	motor.left.target = 0
 	motor.right.target = 0
end
 	
#-----------------------------------------------------------------------------Collision Avoidance---------------------------------------------------------	
 #obstacle avoidance
onevent prox	
	# front sensor array
	sensorFrontArray[0] = prox.horizontal[0]
	sensorFrontArray[1] = prox.horizontal[1]
	sensorFrontArray[2] = prox.horizontal[2]
	sensorFrontArray[3] = prox.horizontal[3]
	sensorFrontArray[4] = prox.horizontal[4]
	# back sensor array
	sensorBackArray[0] =  prox.horizontal[5]
	sensorBackArray[1] =  prox.horizontal[6]
	#max of front sensor array
	sensorFrontMax = 0
	#max of back sensor array
	sensorBackMax = 0
	#sum of front sensor array
	sensorSumFront = 0
	#sum of back sensor array
	sensorSumBack = 0
#----------------------------------------------Loop to track sensor readings ----------------------------------	
	# loop to find max front sensors
	for i in 0:4 do
		if (sensorFrontArray[i] > sensorFrontMax) then
			sensorFrontMax = sensorFrontArray[i]
		end
	end
	
	# loop to find max back sensors
	for i in 0:1 do
		if (sensorBackArray[i] > sensorBackMax) then
			sensorBackMax = sensorBackArray[i]
		end
	end
	
	# sum of front sensors
	for i in 0:4 do
		sensorSumFront = sensorSumFront+ sensorFrontArray[i]
	end
	
	# sum of back sensors
	for i in 0:1 do
		sensorSumBack = sensorSumBack+ sensorBackArray[i]
	end
#------------------------------------------Loop declararations Ends here--------------------------------------------	

if (shouldMove == 1) then
	#call prox.comm.enable(1)
	call leds.top(0,31,0)
	if (sensorFrontMax < 900) then # only moves forward when no sensor readings higher than 0
			call leds.top(0,31,0)
			motor.left.target = 2000
			motor.right.target = 2000
			reverseFromRight = 0
			reverseFromLeft = 0
	 	elseif (prox.horizontal[1] > 900 or prox.horizontal[0] > 900) then
	 		#turn left
	 		call leds.top(31,0,0)
	 		motor.left.target = 100
	 		motor.right.target = -200
	 		reverseFromLeft = 1
	 		countLeftSteps++
	 		
		elseif (prox.horizontal[3] > 900 or prox.horizontal[4]>900) then
	 		#turn right
	 		call leds.top(31,0,0)
	 		motor.right.target = 100
			motor.left.target = -200
			#reverseFromRight = 1
			countRightSteps++	
			
		#middle sensor at 2
			elseif (sensorFrontMax == prox.horizontal[2]) then
	 		#turn right
	 		call leds.top(31,31,0)
	 		motor.right.target = -500
			motor.left.target =	 -500
	 		#countFrontSteps++
	 		#motor.left.target = 0
			#motor.left.target = -50
			#robot stuck in front?
			elseif (prox.horizontal[2] == sensorFrontMax and prox.horizontal[2] == sensorSumFront) then
				countFrontSteps++
				
			#check rear sensor
			elseif (sensorSumBack > 7000) then
			motor.right.target = 500
			motor.left.target =	 500			
	end	

#deadEnd?
if (sensorSumFront > 6000 and sensorSumFront < 20000 ) then
	detectDeadEnd++
end

if (detectDeadEnd >1 and sensorSumBack <1000) then
	call leds.top(0,0,32)
	motor.right.target = -900
	motor.left.target =	 0
	detectDeadEnd = 0
end

if (countRightSteps > 2) then
	motor.right.target = 500
	motor.left.target = 500
	countRightSteps = 0
	
elseif (countLeftSteps  > 2) then
	motor.right.target = 500
	motor.left.target = 500
	countLeftSteps = 0
	
elseif (countFrontSteps > 1) then
	motor.right.target = -200
	motor.left.target = -200
	countFrontSteps = 0
	
end


if (sensorFrontMax > 3000) then
	initiateReverse++
end

if(initiateReverse >2) then
	call leds.top(32,0,0)
	motor.right.target = -900
	motor.left.target = -900
	initiateReverse=0
	reverseProtocal++
end

if (reverseProtocal > 8) then
	motor.right.target = 1000
	motor.left.target = 1000
	reverseProtocal=0
end

end
#----------------------------COLLISION AVOIDANCE END HERE----------------------------------

#------------------------------Thymio Worker ---------------------------------------



prox.comm.tx = thymioWorker

#call leds.top(0,0,32)

onevent prox.comm
	#------------listen for messages from thymioBeacon------------------------
	
	#-----------get confirmation from beacon---check if confirmation matches ID--------------
	if (prox.comm.rx == thymioWorker) then
				shouldMove = 0 # halt robot movement.
				motor.left.target = 0
				motor.right.target =0
				call leds.top(32,32,0)
				#call sound.system(7)
				call sound.duration(0,10)
		#at this point thymioWorker receives its ID from the beacon
			#init timer
			countDownTillCollab++ #counter for waiting time
	elseif (prox.comm.rx == 20) then
		call leds.top(0,32,0)
		call prox.comm.enable(0)
		shouldMove = 0
		motor.left.target = 0
		motor.right.target =0
		timer.period[1] =100
		initAfterSuccessfulCollab = 1
	else
	#	call leds.top(0,0,32) #default to blue
	end

#---------------check is waiting time elapsed-----------here we check if no collaboration response recieved from beacon then send 404 error message
if (countDownTillCollab > 200) then	
		call leds.top(32,0,0)
		call prox.comm.enable(1)
		prox.comm.tx = timeOut #send time out message to beacon if no successful collaboration message recieved
		countDownTillCollab = 0
		timeOutCounter =1 #next step set timeOutCounter to 1 to  enable randomWalk
		timer.period[0] = 100 #init timer for 100ms to enable communication
end
#--------------------------disable communication and resume random walk------------------------	

onevent timer1
# set a variable that decides which count down variable is incremented 
if (initAfterSuccessfulCollab == 1) then
	countDownAfterCollab++# intention here is to enable communication if initAfterSuccessfulCollab = 1 and  countDownAfterCollab > 90 
	#which is activated if the collaboration is successful
	if (countDownAfterCollab > 90) then
		shouldMove =1
		timer.period[1] = 0 
		countDownAfterCollab = 0
		call prox.comm.enable(1)
		initAfterSuccessfulCollab = 0
	end
	
end


# intention is to restart communication is the variable isMovingAfter404Error === 1
if (isMovingAfter404Error == 1) then
	#timer is currently running so enable prox.comm.enable(1) is enableCommAfterTimeout > 90 
	#at this point robot already resumed randomwalk due to timeout because no colloboration successfull recieved
	# inorder to walk robot must not communicate with beacon else it continues to recieve signal from beacon and wont walk away
	enableCommAfterTimeout++
	if (enableCommAfterTimeout > 99) then
			call prox.comm.enable(1)
			call sound.system(6)
			enableCommAfterTimeout = 0
			isMovingAfter404Error = 0
	end
		
end



onevent timer0
	if (timeOutCounter == 1) then
			call prox.comm.enable(0) #check if timeOutCounter === 1 and shut off communication so that robot can resume random walk
			shouldMove = 1
			timer.period[0] = 0 
			isMovingAfter404Error =1
			timer.period[1] = 100 
			timeOutCounter = 0
	end
	


]]></node>


</network>
